name: CI

on:
  push:
  workflow_dispatch:

jobs:
  # Slack開始通知
  slackStartNotification:
    name: Slack-Start-Notification
    runs-on: ubuntu-latest
    env:
      SLACK_USERNAME: Github Actions
      SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Notify Start of CI
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: Deploy / Start
          SLACK_COLOR: warning
          SLACK_MESSAGE: ${{ github.ref_name }} ブランチのCIを開始します🛠️
  # 型チェック
  TypeCheck:
    needs: slackStartNotification
    runs-on: ubuntu-latest
    steps:
      # ブランチを取得
      - uses: actions/checkout@v4
      # Node.jsをセットアップ
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # キャッシュを有効化
          cache: 'npm'
      # npmのキャッシュ設定
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npmのキャッシュファイルはLinux/macOSでは`~/.npm`に保存される
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # キャッシュがヒットしなかった場合、node_modulesの状態を表示
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      # 依存パッケージをインストール
      - name: Install dependencies
        run: npm ci
      # 型チェックを実行
      - name: Run TypeCheck
        run: npm run typecheck

  # ビルドチェック
  Build:
    needs: TypeCheck
    runs-on: ubuntu-latest
    steps:
      # ブランチを取得
      - uses: actions/checkout@v4
      # Node.jsをセットアップ
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # キャッシュを有効化
          cache: 'npm'
      # npmのキャッシュ設定
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npmのキャッシュファイルはLinux/macOSでは`~/.npm`に保存される
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # キャッシュがヒットしなかった場合、node_modulesの状態を表示
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      # 依存パッケージをインストール
      - name: Install dependencies
        run: npm ci
      # ビルドを実行
      - name: Run Build
        run: npm run build

  # ユニットテスト
  UnitTest:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      # ブランチを取得
      - uses: actions/checkout@v4
      # Node.jsをセットアップ
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # キャッシュを有効化
          cache: 'npm'
      # npmのキャッシュ設定
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npmのキャッシュファイルはLinux/macOSでは`~/.npm`に保存される
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # キャッシュがヒットしなかった場合、node_modulesの状態を表示
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      # 依存パッケージをインストール
      - name: Install dependencies
        run: npm ci
      # ユニットテストを実行
      - name: Run Unit Test
        run: npm run test

  # E2Eテスト
  E2ETest:
    needs: Build
    runs-on: ubuntu-latest
    env:
      # データベースの設定
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
      # Auth.jsのシークレットキーの設定
      AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
    services:
      # データベースのコンテナを起動
      postgres:
        image: postgres:16
        # データベースのユーザー名、パスワード、データベース名の設定
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        # データベースのヘルスチェックの設定
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # データベースのポートの設定
        ports:
          - 5432:5432
    steps:
      # ブランチを取得
      - uses: actions/checkout@v4
      # Node.jsをセットアップ
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # キャッシュを有効化
          cache: 'npm'
      # npmのキャッシュ設定
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npmのキャッシュファイルはLinux/macOSでは`~/.npm`に保存される
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # キャッシュがヒットしなかった場合、node_modulesの状態を表示
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      # 依存パッケージをインストール
      - name: Install dependencies
        run: npm ci
      # Playwrightをインストール
      - name: Install Playwright
        run: npx playwright install --with-deps
      # Prismaのマイグレーションを実行
      - name: Run Prisma migrate
        run: npx prisma migrate deploy
      # 自動でOAuth認証（Google）するためのテストデータをシード
      - name: Seed test data
        run: psql -h localhost -U postgres -d postgres -f ./prisma/seed.sql
        env:
          PGPASSWORD: postgres
      # シードしたテストデータの確認
      - name: Verify Seed Data
        run: |
          psql -h localhost -U postgres -d postgres -c "SELECT * FROM \"User\" WHERE id = 'testId';"
          psql -h localhost -U postgres -d postgres -c "SELECT * FROM \"Session\" WHERE \"userId\" = 'testId';"
          psql -h localhost -U postgres -d postgres -c "SELECT * FROM \"Balance\" WHERE \"userId\" = 'testId';"
        env:
          PGPASSWORD: postgres
      # E2Eテストを実行
      - name: Run E2E Test
        run: npm run playwright

  # Slack通知
  SlackEndNotification:
    name: Slack-End-Notification
    runs-on: ubuntu-latest
    needs: [TypeCheck, Build, UnitTest, E2ETest]
    env:
      SLACK_USERNAME: Github Actions
      SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      # 成功
      - name: Slack Notification on Success
        uses: rtCamp/action-slack-notify@v2
        if: ${{ success() }}
        env:
          SLACK_TITLE: Deploy / Success
          SLACK_COLOR: good
          SLACK_MESSAGE: ${{ github.ref_name }}ブランチのCIが成功しました🚀

      # 失敗
      - name: Slack Notification on Failure
        uses: rtCamp/action-slack-notify@v2
        if: ${{ failure() }}
        env:
          SLACK_TITLE: Deploy / Failure
          SLACK_COLOR: danger
          SLACK_MESSAGE: ${{ github.ref_name }}ブランチのCIが失敗しました😢
